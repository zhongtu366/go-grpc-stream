// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vpr.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestConfig struct {
	Cmd       int32  `protobuf:"varint,1,opt,name=cmd" json:"cmd,omitempty"`
	Gid       string `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	Pid       string `protobuf:"bytes,3,opt,name=pid" json:"pid,omitempty"`
	Imei      string `protobuf:"bytes,4,opt,name=imei" json:"imei,omitempty"`
	Timestamp string `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *RequestConfig) Reset()                    { *m = RequestConfig{} }
func (m *RequestConfig) String() string            { return proto.CompactTextString(m) }
func (*RequestConfig) ProtoMessage()               {}
func (*RequestConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RequestConfig) GetCmd() int32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *RequestConfig) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *RequestConfig) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *RequestConfig) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *RequestConfig) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type RequestBody struct {
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *RequestBody) Reset()                    { *m = RequestBody{} }
func (m *RequestBody) String() string            { return proto.CompactTextString(m) }
func (*RequestBody) ProtoMessage()               {}
func (*RequestBody) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RequestBody) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// 声纹流式请求
type VoiceprintRecognizeRequest struct {
	// Types that are valid to be assigned to VprRequest:
	//	*VoiceprintRecognizeRequest_Config
	//	*VoiceprintRecognizeRequest_Body
	VprRequest isVoiceprintRecognizeRequest_VprRequest `protobuf_oneof:"vpr_request"`
}

func (m *VoiceprintRecognizeRequest) Reset()                    { *m = VoiceprintRecognizeRequest{} }
func (m *VoiceprintRecognizeRequest) String() string            { return proto.CompactTextString(m) }
func (*VoiceprintRecognizeRequest) ProtoMessage()               {}
func (*VoiceprintRecognizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type isVoiceprintRecognizeRequest_VprRequest interface {
	isVoiceprintRecognizeRequest_VprRequest()
}

type VoiceprintRecognizeRequest_Config struct {
	Config *RequestConfig `protobuf:"bytes,1,opt,name=config,oneof"`
}
type VoiceprintRecognizeRequest_Body struct {
	Body *RequestBody `protobuf:"bytes,2,opt,name=body,oneof"`
}

func (*VoiceprintRecognizeRequest_Config) isVoiceprintRecognizeRequest_VprRequest() {}
func (*VoiceprintRecognizeRequest_Body) isVoiceprintRecognizeRequest_VprRequest()   {}

func (m *VoiceprintRecognizeRequest) GetVprRequest() isVoiceprintRecognizeRequest_VprRequest {
	if m != nil {
		return m.VprRequest
	}
	return nil
}

func (m *VoiceprintRecognizeRequest) GetConfig() *RequestConfig {
	if x, ok := m.GetVprRequest().(*VoiceprintRecognizeRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (m *VoiceprintRecognizeRequest) GetBody() *RequestBody {
	if x, ok := m.GetVprRequest().(*VoiceprintRecognizeRequest_Body); ok {
		return x.Body
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VoiceprintRecognizeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VoiceprintRecognizeRequest_OneofMarshaler, _VoiceprintRecognizeRequest_OneofUnmarshaler, _VoiceprintRecognizeRequest_OneofSizer, []interface{}{
		(*VoiceprintRecognizeRequest_Config)(nil),
		(*VoiceprintRecognizeRequest_Body)(nil),
	}
}

func _VoiceprintRecognizeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VoiceprintRecognizeRequest)
	// vpr_request
	switch x := m.VprRequest.(type) {
	case *VoiceprintRecognizeRequest_Config:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Config); err != nil {
			return err
		}
	case *VoiceprintRecognizeRequest_Body:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Body); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VoiceprintRecognizeRequest.VprRequest has unexpected type %T", x)
	}
	return nil
}

func _VoiceprintRecognizeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VoiceprintRecognizeRequest)
	switch tag {
	case 1: // vpr_request.config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestConfig)
		err := b.DecodeMessage(msg)
		m.VprRequest = &VoiceprintRecognizeRequest_Config{msg}
		return true, err
	case 2: // vpr_request.body
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestBody)
		err := b.DecodeMessage(msg)
		m.VprRequest = &VoiceprintRecognizeRequest_Body{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VoiceprintRecognizeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VoiceprintRecognizeRequest)
	// vpr_request
	switch x := m.VprRequest.(type) {
	case *VoiceprintRecognizeRequest_Config:
		s := proto.Size(x.Config)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VoiceprintRecognizeRequest_Body:
		s := proto.Size(x.Body)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 声纹响应
type VoiceprintRecognizeResponse struct {
	Status      *Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Information string  `protobuf:"bytes,2,opt,name=information" json:"information,omitempty"`
}

func (m *VoiceprintRecognizeResponse) Reset()                    { *m = VoiceprintRecognizeResponse{} }
func (m *VoiceprintRecognizeResponse) String() string            { return proto.CompactTextString(m) }
func (*VoiceprintRecognizeResponse) ProtoMessage()               {}
func (*VoiceprintRecognizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *VoiceprintRecognizeResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VoiceprintRecognizeResponse) GetInformation() string {
	if m != nil {
		return m.Information
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestConfig)(nil), "rpc.RequestConfig")
	proto.RegisterType((*RequestBody)(nil), "rpc.RequestBody")
	proto.RegisterType((*VoiceprintRecognizeRequest)(nil), "rpc.VoiceprintRecognizeRequest")
	proto.RegisterType((*VoiceprintRecognizeResponse)(nil), "rpc.VoiceprintRecognizeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Vpr service

type VprClient interface {
	VoiceprintRecognize(ctx context.Context, opts ...grpc.CallOption) (Vpr_VoiceprintRecognizeClient, error)
}

type vprClient struct {
	cc *grpc.ClientConn
}

func NewVprClient(cc *grpc.ClientConn) VprClient {
	return &vprClient{cc}
}

func (c *vprClient) VoiceprintRecognize(ctx context.Context, opts ...grpc.CallOption) (Vpr_VoiceprintRecognizeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Vpr_serviceDesc.Streams[0], c.cc, "/rpc.vpr/VoiceprintRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &vprVoiceprintRecognizeClient{stream}
	return x, nil
}

type Vpr_VoiceprintRecognizeClient interface {
	Send(*VoiceprintRecognizeRequest) error
	CloseAndRecv() (*VoiceprintRecognizeResponse, error)
	grpc.ClientStream
}

type vprVoiceprintRecognizeClient struct {
	grpc.ClientStream
}

func (x *vprVoiceprintRecognizeClient) Send(m *VoiceprintRecognizeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vprVoiceprintRecognizeClient) CloseAndRecv() (*VoiceprintRecognizeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VoiceprintRecognizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Vpr service

type VprServer interface {
	VoiceprintRecognize(Vpr_VoiceprintRecognizeServer) error
}

func RegisterVprServer(s *grpc.Server, srv VprServer) {
	s.RegisterService(&_Vpr_serviceDesc, srv)
}

func _Vpr_VoiceprintRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VprServer).VoiceprintRecognize(&vprVoiceprintRecognizeServer{stream})
}

type Vpr_VoiceprintRecognizeServer interface {
	SendAndClose(*VoiceprintRecognizeResponse) error
	Recv() (*VoiceprintRecognizeRequest, error)
	grpc.ServerStream
}

type vprVoiceprintRecognizeServer struct {
	grpc.ServerStream
}

func (x *vprVoiceprintRecognizeServer) SendAndClose(m *VoiceprintRecognizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vprVoiceprintRecognizeServer) Recv() (*VoiceprintRecognizeRequest, error) {
	m := new(VoiceprintRecognizeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Vpr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.vpr",
	HandlerType: (*VprServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VoiceprintRecognize",
			Handler:       _Vpr_VoiceprintRecognize_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vpr.proto",
}

func init() { proto.RegisterFile("vpr.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6b, 0xea, 0x40,
	0x10, 0xc6, 0x8d, 0x51, 0xc1, 0x89, 0x82, 0xec, 0x7b, 0x87, 0xe0, 0x7b, 0xd0, 0x34, 0x85, 0x62,
	0xa1, 0x44, 0xb0, 0xc7, 0x9e, 0x6a, 0x2f, 0x9e, 0x53, 0xe8, 0xc1, 0x4b, 0x89, 0xbb, 0x6b, 0x9c,
	0x43, 0xb2, 0xd3, 0xdd, 0x35, 0x45, 0x6f, 0xfd, 0xcf, 0x4b, 0x36, 0x29, 0xb5, 0xa0, 0xb7, 0xc9,
	0x6f, 0xbe, 0x99, 0xef, 0xcb, 0xb0, 0x30, 0xac, 0x48, 0x27, 0xa4, 0x95, 0x55, 0xcc, 0xd7, 0xc4,
	0xa7, 0x23, 0x63, 0x33, 0xbb, 0x37, 0x0d, 0x8a, 0x3f, 0x60, 0x9c, 0xca, 0xf7, 0xbd, 0x34, 0xf6,
	0x59, 0x95, 0x5b, 0xcc, 0xd9, 0x04, 0x7c, 0x5e, 0x88, 0xd0, 0x8b, 0xbc, 0x59, 0x3f, 0xad, 0xcb,
	0x9a, 0xe4, 0x28, 0xc2, 0x6e, 0xe4, 0xcd, 0x86, 0x69, 0x5d, 0xd6, 0x84, 0x50, 0x84, 0x7e, 0x43,
	0x08, 0x05, 0x63, 0xd0, 0xc3, 0x42, 0x62, 0xd8, 0x73, 0xc8, 0xd5, 0xec, 0x3f, 0x0c, 0x2d, 0x16,
	0xd2, 0xd8, 0xac, 0xa0, 0xb0, 0xef, 0x1a, 0x3f, 0x20, 0xbe, 0x86, 0xa0, 0x35, 0x5e, 0x2a, 0x71,
	0xa8, 0x17, 0x6c, 0x94, 0x38, 0x38, 0xdf, 0x51, 0xea, 0xea, 0xf8, 0xd3, 0x83, 0xe9, 0xab, 0x42,
	0x2e, 0x49, 0x63, 0x69, 0x53, 0xc9, 0x55, 0x5e, 0xe2, 0x51, 0xb6, 0x63, 0xec, 0x1e, 0x06, 0xdc,
	0x65, 0x76, 0x43, 0xc1, 0x82, 0x25, 0x9a, 0x78, 0xf2, 0xeb, 0x6f, 0x56, 0x9d, 0xb4, 0xd5, 0xb0,
	0xdb, 0xd6, 0xa0, 0xeb, 0xb4, 0x93, 0x53, 0x6d, 0x1d, 0x60, 0xd5, 0x69, 0x4c, 0x97, 0x63, 0x08,
	0x2a, 0xd2, 0x6f, 0xba, 0x69, 0xc5, 0x02, 0xfe, 0x9d, 0x8d, 0x60, 0x48, 0x95, 0x46, 0xb2, 0x1b,
	0x18, 0x34, 0xe7, 0x6c, 0x33, 0x04, 0x6e, 0xef, 0x8b, 0x43, 0x69, 0xdb, 0x62, 0x11, 0x04, 0x58,
	0x6e, 0x95, 0x2e, 0x32, 0x8b, 0xaa, 0x6c, 0x0f, 0x79, 0x8a, 0x16, 0x19, 0xf8, 0x15, 0x69, 0xb6,
	0x86, 0x3f, 0x67, 0xcc, 0xd8, 0x95, 0x5b, 0x7a, 0xf9, 0x12, 0xd3, 0xe8, 0xb2, 0xa0, 0xc9, 0x39,
	0xf3, 0x96, 0x4f, 0xf0, 0x97, 0xab, 0x22, 0x31, 0x2a, 0x57, 0xfb, 0xc4, 0x90, 0x94, 0x7c, 0x57,
	0x4f, 0xad, 0xef, 0x72, 0xb4, 0xdf, 0xdf, 0xae, 0x39, 0x3f, 0xee, 0xf0, 0x80, 0xe5, 0x9c, 0xb4,
	0xaa, 0x50, 0x48, 0x6d, 0xe6, 0x9a, 0xf8, 0xa3, 0x26, 0xbe, 0x19, 0xb8, 0x27, 0xf3, 0xf0, 0x15,
	0x00, 0x00, 0xff, 0xff, 0x5a, 0xcc, 0x34, 0xb8, 0x52, 0x02, 0x00, 0x00,
}
