// Code generated by protoc-gen-go. DO NOT EDIT.
// source: status.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Status struct {
	Code    int32                   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Errmsg  string                  `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	Details []*google_protobuf1.Any `protobuf:"bytes,3,rep,name=details" json:"details,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *Status) GetDetails() []*google_protobuf1.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

type RespID struct {
	RespId string `protobuf:"bytes,1,opt,name=resp_id,json=respId" json:"resp_id,omitempty"`
}

func (m *RespID) Reset()                    { *m = RespID{} }
func (m *RespID) String() string            { return proto.CompactTextString(m) }
func (*RespID) ProtoMessage()               {}
func (*RespID) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RespID) GetRespId() string {
	if m != nil {
		return m.RespId
	}
	return ""
}

func init() {
	proto.RegisterType((*Status)(nil), "rpc.Status")
	proto.RegisterType((*RespID)(nil), "rpc.RespID")
}

func init() { proto.RegisterFile("status.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x15, 0x02, 0xae, 0x6a, 0x98, 0xac, 0x0a, 0x02, 0x53, 0xe8, 0x14, 0x16, 0x5b, 0x82,
	0x91, 0xa9, 0x88, 0xa5, 0xab, 0xd9, 0x58, 0x50, 0x6a, 0x1f, 0xae, 0xa5, 0x36, 0x3e, 0xdd, 0x39,
	0x48, 0xe1, 0xd7, 0xa3, 0xba, 0x64, 0xbb, 0xef, 0xde, 0x93, 0x3e, 0x3d, 0x79, 0xc3, 0xb9, 0xcf,
	0x23, 0x6b, 0xa4, 0x94, 0x93, 0xaa, 0x09, 0xdd, 0xc3, 0x7d, 0x48, 0x29, 0x1c, 0xc0, 0x94, 0xd7,
	0x6e, 0xfc, 0x36, 0xfd, 0x30, 0x9d, 0xf3, 0xb5, 0x97, 0xe2, 0xa3, 0xf4, 0x95, 0x92, 0x97, 0x2e,
	0x79, 0x68, 0xaa, 0xb6, 0xea, 0xae, 0x6c, 0xb9, 0xd5, 0xad, 0x14, 0x40, 0x74, 0xe4, 0xd0, 0x5c,
	0xb4, 0x55, 0xb7, 0xb4, 0xff, 0xa4, 0xb4, 0x5c, 0x78, 0xc8, 0x7d, 0x3c, 0x70, 0x53, 0xb7, 0x75,
	0x77, 0xfd, 0xbc, 0xd2, 0x67, 0x85, 0x9e, 0x15, 0x7a, 0x33, 0x4c, 0x76, 0x2e, 0xad, 0x1f, 0xa5,
	0xb0, 0xc0, 0xb8, 0x7d, 0x57, 0x77, 0x72, 0x41, 0xc0, 0xf8, 0x15, 0x7d, 0x11, 0x2d, 0xad, 0x38,
	0xe1, 0xd6, 0xbf, 0x6d, 0xe4, 0xca, 0xa5, 0xa3, 0xe6, 0x14, 0xd2, 0xa8, 0x19, 0x01, 0xdc, 0x5e,
	0x13, 0xba, 0xcf, 0xa7, 0x10, 0xf3, 0xcc, 0x25, 0x34, 0xbf, 0xfb, 0x38, 0xc5, 0xe1, 0x34, 0xe6,
	0x27, 0x7a, 0x20, 0x36, 0x84, 0xee, 0x95, 0xd0, 0xed, 0x44, 0x91, 0xbf, 0xfc, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0xfe, 0x02, 0x3d, 0x02, 0x01, 0x00, 0x00,
}
